{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DINH20104022/2014022-Hung-Minh-Tran-Dinh/blob/main/ND.GAO.VN\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "RLr03AvnH1HJ"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from keras.utils import np_utils\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Activation, Dropout, Conv2D, MaxPooling2D, Flatten\n",
        "from keras.callbacks import EarlyStopping, ModelCheckpoint\n",
        "from sklearn.utils import validation \n",
        "from sklearn import preprocessing\n",
        "from keras.utils import to_categorical\n",
        "from keras.models import load_model\n",
        "from keras.utils import load_img, img_to_array\n",
        "from keras.preprocessing.image import ImageDataGenerator"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oAJQ92MsH3Hv",
        "outputId": "1728c647-b772-46ec-a47a-8a938a770b90"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[Errno 2] No such file or directory: '/content/drive/MyDrive/cac loai gao'\n",
            "/content\n"
          ]
        }
      ],
      "source": [
        "%cd /content/drive/MyDrive/cac loai gao"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TD5Lov6uH8sL",
        "outputId": "c1b5c7ce-fadc-462f-96df-e89188df913f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 250 images belonging to 5 classes.\n",
            "Found 114 images belonging to 5 classes.\n"
          ]
        }
      ],
      "source": [
        "train_datagen=ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)\n",
        "training_set=train_datagen.flow_from_directory('/content/drive/MyDrive/DOWLOAD/Gạo/test-20221107T082856Z-001/test',target_size=(150,150), batch_size=32, class_mode='categorical')\n",
        "test_set = train_datagen.flow_from_directory('/content/drive/MyDrive/DOWLOAD/Gạo/train-20221107T083117Z-001/train/train',target_size=(150,150), batch_size=32, class_mode='categorical')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dkJpOeBXIJXI",
        "outputId": "f03f93dc-e7e9-47b2-dca8-a136c29e23c2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Arborio': 0, 'Basmati': 1, 'Ipsala': 2, 'Jasmine': 3, 'Karacadag': 4}"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "training_set.class_indices\n",
        "test_set.class_indices"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1DWY42hjIKSu",
        "outputId": "9c90fe6e-8191-4984-ee08-68256bd842cf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d_12 (Conv2D)          (None, 150, 150, 32)      896       \n",
            "                                                                 \n",
            " conv2d_13 (Conv2D)          (None, 150, 150, 32)      9248      \n",
            "                                                                 \n",
            " max_pooling2d_6 (MaxPooling  (None, 75, 75, 32)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " conv2d_14 (Conv2D)          (None, 75, 75, 64)        18496     \n",
            "                                                                 \n",
            " conv2d_15 (Conv2D)          (None, 75, 75, 64)        36928     \n",
            "                                                                 \n",
            " max_pooling2d_7 (MaxPooling  (None, 37, 37, 64)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " conv2d_16 (Conv2D)          (None, 37, 37, 128)       73856     \n",
            "                                                                 \n",
            " conv2d_17 (Conv2D)          (None, 37, 37, 128)       147584    \n",
            "                                                                 \n",
            " max_pooling2d_8 (MaxPooling  (None, 18, 18, 128)      0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten_2 (Flatten)         (None, 41472)             0         \n",
            "                                                                 \n",
            " dense_4 (Dense)             (None, 128)               5308544   \n",
            "                                                                 \n",
            " dropout_2 (Dropout)         (None, 128)               0         \n",
            "                                                                 \n",
            " dense_5 (Dense)             (None, 5)                 645       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 5,596,197\n",
            "Trainable params: 5,596,197\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "model=Sequential()\n",
        "\n",
        "model.add(Conv2D(32,(3,3), activation='relu', kernel_initializer='he_uniform', padding='same',input_shape=(150,150,3))) \n",
        "model.add(Conv2D(32,(3,3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n",
        "model.add(MaxPooling2D(2,2))\n",
        "model.add(Conv2D(64,(3,3), activation='relu', kernel_initializer='he_uniform', padding='same',input_shape=(150,150,3))) \n",
        "model.add(Conv2D(64,(3,3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n",
        "model.add(MaxPooling2D(2,2))\n",
        "model.add(Conv2D(128,(3,3), activation='relu', kernel_initializer='he_uniform', padding='same',input_shape=(150,150,3))) \n",
        "model.add(Conv2D(128,(3,3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n",
        "model.add(MaxPooling2D(2,2))\n",
        "model.add(Flatten())\n",
        "model.add(Dense(128,activation='relu',kernel_initializer='he_uniform'))\n",
        "model.add(Dropout(0.2))\n",
        "model.add(Dense(5,activation='softmax'))\n",
        "model.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4_rLjDfpINl6",
        "outputId": "e353552f-a13b-4feb-ec21-7c6a38121b77"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8/8 [==============================] - 3s 339ms/step - loss: 0.4357 - accuracy: 0.8040 - val_loss: 1.1669 - val_accuracy: 0.4474\n",
            "Epoch 18/100\n",
            "8/8 [==============================] - 3s 335ms/step - loss: 0.4278 - accuracy: 0.8280 - val_loss: 0.6804 - val_accuracy: 0.7456\n",
            "Epoch 19/100\n",
            "8/8 [==============================] - 3s 334ms/step - loss: 0.4168 - accuracy: 0.8240 - val_loss: 0.7981 - val_accuracy: 0.5877\n",
            "Epoch 20/100\n",
            "8/8 [==============================] - 3s 390ms/step - loss: 0.4675 - accuracy: 0.7960 - val_loss: 0.6657 - val_accuracy: 0.6842\n",
            "Epoch 21/100\n",
            "8/8 [==============================] - 3s 343ms/step - loss: 0.3519 - accuracy: 0.8680 - val_loss: 0.6399 - val_accuracy: 0.7281\n",
            "Epoch 22/100\n",
            "8/8 [==============================] - 4s 539ms/step - loss: 0.4351 - accuracy: 0.8440 - val_loss: 0.7810 - val_accuracy: 0.6228\n",
            "Epoch 23/100\n",
            "8/8 [==============================] - 3s 427ms/step - loss: 0.3931 - accuracy: 0.8520 - val_loss: 0.6756 - val_accuracy: 0.6579\n",
            "Epoch 24/100\n",
            "8/8 [==============================] - 3s 339ms/step - loss: 0.3523 - accuracy: 0.8600 - val_loss: 0.6782 - val_accuracy: 0.6491\n",
            "Epoch 25/100\n",
            "8/8 [==============================] - 3s 337ms/step - loss: 0.3910 - accuracy: 0.8080 - val_loss: 0.6656 - val_accuracy: 0.6754\n",
            "Epoch 26/100\n",
            "8/8 [==============================] - 3s 347ms/step - loss: 0.3738 - accuracy: 0.8640 - val_loss: 0.5711 - val_accuracy: 0.7807\n",
            "Epoch 27/100\n",
            "8/8 [==============================] - 3s 340ms/step - loss: 0.4581 - accuracy: 0.8200 - val_loss: 0.6973 - val_accuracy: 0.6667\n",
            "Epoch 28/100\n",
            "8/8 [==============================] - 3s 337ms/step - loss: 0.3755 - accuracy: 0.8400 - val_loss: 0.5203 - val_accuracy: 0.7632\n",
            "Epoch 29/100\n",
            "8/8 [==============================] - 3s 334ms/step - loss: 0.3495 - accuracy: 0.8720 - val_loss: 0.8226 - val_accuracy: 0.5877\n",
            "Epoch 30/100\n",
            "8/8 [==============================] - 3s 339ms/step - loss: 0.3698 - accuracy: 0.8760 - val_loss: 0.5479 - val_accuracy: 0.7895\n",
            "Epoch 31/100\n",
            "8/8 [==============================] - 3s 425ms/step - loss: 0.3891 - accuracy: 0.8520 - val_loss: 0.6900 - val_accuracy: 0.6842\n",
            "Epoch 32/100\n",
            "8/8 [==============================] - 3s 339ms/step - loss: 0.3734 - accuracy: 0.8280 - val_loss: 0.7159 - val_accuracy: 0.6667\n",
            "Epoch 33/100\n",
            "8/8 [==============================] - 3s 339ms/step - loss: 0.3782 - accuracy: 0.8640 - val_loss: 0.6225 - val_accuracy: 0.6930\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fd48c247f10>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n",
        "model.fit(training_set,epochs=100,batch_size=128,verbose=1, validation_data=test_set, callbacks=[EarlyStopping(monitor='val_loss', patience=20)])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "ZeKoCaKIIRCb"
      },
      "outputs": [],
      "source": [
        "model.save('gaoo.h5')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "gAbN9D5CIWa8"
      },
      "outputs": [],
      "source": [
        "model_gao = load_model('gaoo.h5')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cnNzfbJoIY-N",
        "outputId": "52e4f2e6-a071-4d35-b8b2-70ab23d7a5f5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train Loss 0.26685407757759094\n",
            "Train Accuracy 0.8799999952316284\n"
          ]
        }
      ],
      "source": [
        "Score=model.evaluate(training_set,verbose=0)\n",
        "print('Train Loss', Score[0])\n",
        "print('Train Accuracy', Score[1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "3wLtvpXGIb5Q",
        "outputId": "c8ab51e7-428f-4c8b-c5f4-6afe7b1e32cb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 17ms/step\n",
            "1/1 [==============================] - 0s 14ms/step\n",
            "Đây là gạo: Gạo sữa Mai Vàng\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "img = load_img('/content/Arborio (1).jpg',target_size = (150,150))\n",
        "plt.imshow(img)\n",
        "img=img_to_array(img)\n",
        "img=img.astype('float32')\n",
        "img=img/255\n",
        "img=np.expand_dims(img,axis=0)\n",
        "result=model_gao.predict(img)\n",
        "class_gao=['Hàm châu',\n",
        " 'Gạo nếp cái hoa vàng',\n",
        " 'Gạo lứt huyết rồng vừa ngon vừa bổ dưỡng',\n",
        " 'ST24',\n",
        " 'Gạo sữa Mai Vàng',\n",
        " 'Thơm hương lài',\n",
        " 'Gạo thơm nàng Sen']\n",
        "a= int(np.argmax(model.predict(img),axis=1))\n",
        "print(\"Đây là gạo:\", class_gao[a])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eJAs5CGeMKnR"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": [],
      "mount_file_id": "1FqtaN5Uq44khSDmVX2H-4wXhqxMUKgJ0",
      "authorship_tag": "ABX9TyPeCYKpk3aFoFQu6gv1HTDc",
      "include_colab_link": true
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}